#+title: lit config
#+author: fvrings
#+language: org
#+PROPERTY: header-args:emacs-lisp :tangle init.el
#+startup: overview

* Setup
#+begin_src emacs-lisp
  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
  (setq package-archives '(("gnu" . "http://1.15.88.122/gnu/")
  			 ("nongnu" . "http://1.15.88.122/nongnu/")
  			 ("org" . "http://1.15.88.122/org/")
  			 ("melpa" . "http://1.15.88.122/melpa/")))


  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  (setq use-dialog-box nil)


  ;; Example Elpaca configuration -*- lexical-binding: t; -*-
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
  			      :ref nil :depth 1 :inherit ignore
  			      :files (:defaults "elpaca-test.el" (:exclude "extensions"))
  			      :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Uncomment for systems which cannot create symlinks:
  ;; (elpaca-no-symlink-mode)

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))


#+end_src

* Builtin option
#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

  (add-to-list 'default-frame-alist '(font . "Aporetic Sans Mono-18"))

  (set-face-attribute 'default nil :height 200)

  (add-hook 'prog-mode-hook #'show-paren-mode) ; 编程模式下，光标在括号上时高亮另一个括号
  (add-hook 'prog-mode-hook #'display-line-numbers-mode) ; 编程模式下，光标在括号上时高亮另一个括号

  (column-number-mode t)                       ; 在 Mode line 上显示列号
  (recentf-mode)
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (savehist-mode)
  (save-place-mode)
  (global-auto-revert-mode t)                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
  (delete-selection-mode t)                    ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）
  (setq inhibit-startup-message t)             ; 关闭启动 Emacs 时的欢迎界面
  (setq make-backup-files nil)                 ; 关闭文件自动备份
  (add-hook 'prog-mode-hook #'hs-minor-mode)   ; 编程模式下，可以折叠代码块
  (tool-bar-mode -1)                           ; （熟练后可选）关闭 Tool bar
  (menu-bar-mode -1)                           ; （熟练后可选）关闭 Tool bar
  (scroll-bar-mode -1)                           ; （熟练后可选）关闭 Tool bar
  (when (display-graphic-p) (toggle-scroll-bar -1)) ; 图形界面时关闭滚动条

  (setq display-line-numbers-type 'relative)   ; （可选）显示相对行号

#+end_src

* Org

#+begin_src emacs-lisp
  ;;org
  (use-package org
    :custom
    (org-default-notes-file (concat org-directory "notes.org"))
    (org-agenda-files `(,org-default-notes-file))
    (org-log-done 'time)
    (org-todo-keywords
     '((sequence
        "TODO(t)" "NEXT(n)" "|" "DONE(d)")
       (sequence
        "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "NOTE(o@/!)" "STOP(s@/!)")))
    (org-todo-keyword-faces
     '(("TODO" . (:foreground "#ee5396" :weight bold))    ; magenta/pink
       ("NEXT" . (:foreground "#3ddbd9" :weight bold))    ; cyan
       ("WAIT" . (:foreground "#be95ff" :slant italic))   ; purple
       ("HOLD" . (:foreground "#33b1ff" :slant italic))   ; blue
       ("IDEA" . (:foreground "#08bdba" :weight bold))    ; teal
       ("STOP" . (:foreground "#fa4d56" :weight bold))    ; red
       ("DONE" . (:foreground "#878d96" :strike-through t)))) ; gray (muted)
    (org-agenda-start-with-log-mode t)
    (org-capture-templates
     '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
        "* TODO %?\n  %i\n  %T")))
    (org-tag-alist
     '(("@earn" . ?e)
       ("@canceled" . ?x)
       ("@repeat" . ?r)
       ("@planning" . ?p)))
    (org-directory (file-truename "~/notes/eorg/"))
    (org-agenda-custom-commands
     '(("w" "Weekly Review"
        ((agenda ""
    	       ((org-agenda-overriding-header "Completed Tasks")
    		(org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'done))
    		(org-agenda-span 'week)))
         (agenda ""
    	       ((org-agenda-overriding-header "Unfinished Scheduled Tasks")
    		(org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
    		(org-agenda-span 'week)))))
       ("d" "Daily Agenda"
        ((agenda ""
    	       ((org-agenda-span 'day)
    		(org-deadline-warning-days 1)))
         (tags-todo "+PRIORITY=\"A\""
    		  ((org-agenda-overriding-header "High Priority Tasks")))))
       ("p" "Planning"
        ((tags-todo "+@planning"
                    ((org-agenda-overriding-header "Planning Tasks")))
         (tags-todo "-{.*}"
                    ((org-agenda-overriding-header "Unplanning Tasks")))))))
    :ensure (:wait t)
    :hook (org-trigger . save-buffer) 
    :init
    (add-hook 'org-mode-hook
              (lambda ()
    	      (org-indent-mode)
                (add-hook 'after-save-hook #'org-babel-tangle
                          :append :local))))

  (use-package org-present
    :ensure t
    :config
    ;;:after (visual-fill-column)
    (setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
    			       (shell . t)))
    (add-hook 'org-present-mode-hook
    	    (lambda ()
    	      ;;visual-fill-column
    	      (visual-fill-column-mode 1)
    	      (visual-line-mode 1)

    	      ;;(org-present-big)
    	      (org-display-inline-images)
    	      (org-present-hide-cursor))
  	    :config
  	    (setq org-roam-ui-sync-theme t
    		  org-roam-ui-follow t
    		  org-roam-ui-update-on-save t
    		  org-roam-ui-open-on-start t)))

  ;;org-roam
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (concat org-directory "roam/")) ; 设置 org-roam 目录
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("p" "project" plain
        "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetypes: Project\n")
        :unnarrowed t)))


    :bind (("C-c n l" . org-roam-buffer-toggle)
    	 ("C-c n f" . org-roam-node-find)
    	 ("C-c n g" . org-roam-graph)
    	 ("C-c n a" . org-roam-alias-add)
    	 ("C-c n i" . org-roam-node-insert)
    	 ("C-c n c" . org-roam-capture)
    	 ("C-c o c" . org-capture)
    	 ("C-c o a" . org-agenda)
    	 ("C-c n u" . org-roam-ui-mode)
    	 ("C-c n d" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  (use-package org-download
    :ensure t
    :config
    (setq-default org-download-heading-lvl nil)
    (setq-default org-download-image-dir "./images"))
  ;; use-package with Elpaca:
  (use-package org-alert
    :ensure t
    :config
    (setq alert-default-style 'libnotify)
    (setq org-alert-interval 300
    	org-alert-notify-cutoff 10
    	org-alert-notify-after-event-cutoff 10))

#+end_src
** GTD
this repo has not beed updated for two years.
orgmode is enough
#+begin_src emacs-lisp
  ;; (use-package org-gtd
  ;;   :custom
  ;;   (org-gtd-directory (file-truename "~/notes/eorg/gtd/"))
  ;;   :ensure t)
#+end_src
* Complete

** Search
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :ensure t
    :bind (;; C-c bindings in `mode-specific-map'
  	 ("C-c M-x" . consult-mode-command)
  	 ("C-c h" . consult-history)
  	 ("C-c k" . consult-kmacro)
  	 ("C-c m" . consult-man)
  	 ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)
  	 ;; C-x bindings in `ctl-x-map'
  	 ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
  	 ("C-x b" . consult-buffer) ;; orig. switch-to-buffer
  	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  	 ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
  	 ("C-x t b" . consult-buffer-other-tab) ;; orig. switch-to-buffer-other-tab
  	 ("C-x r b" . consult-bookmark)		;; orig. bookmark-jump
  	 ("C-x p b" . consult-project-buffer) ;; orig. project-switch-to-buffer
  	 ;; Custom M-# bindings for fast register access
  	 ("M-#" . consult-register-load)
  	 ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
  	 ("C-M-#" . consult-register)
  	 ;; Other custom bindings
  	 ("M-y" . consult-yank-pop) ;; orig. yank-pop
  	 ;; M-g bindings in `goto-map'
  	 ("M-g e" . consult-compile-error)
  	 ("M-g f" . consult-flymake) ;; Alternative: consult-flycheck
  	 ("M-g g" . consult-goto-line) ;; orig. goto-line
  	 ("M-g M-g" . consult-goto-line) ;; orig. goto-line
  	 ("M-g o" . consult-outline) ;; Alternative: consult-org-heading
  	 ("M-g m" . consult-mark)
  	 ("M-g k" . consult-global-mark)
  	 ("M-g i" . consult-imenu)
  	 ("M-g I" . consult-imenu-multi)
  	 ;; M-s bindings in `search-map'
  	 ("M-s d" . consult-find) ;; Alternative: consult-fd
  	 ("M-s c" . consult-locate)
  	 ("M-s g" . consult-grep)
  	 ("M-s G" . consult-git-grep)
  	 ("M-s r" . consult-ripgrep)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)
  	 ("M-s k" . consult-keep-lines)
  	 ("M-s u" . consult-focus-lines)
  	 ;; Isearch integration
  	 ("M-s e" . consult-isearch-history)
  	 :map isearch-mode-map
  	 ("M-e" . consult-isearch-history) ;; orig. isearch-edit-string
  	 ("M-s e" . consult-isearch-history) ;; orig. isearch-edit-string
  	 ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
  	 ("M-s L" . consult-line-multi) ;; needed by consult-line to detect isearch
  	 ;; Minibuffer history
  	 :map minibuffer-local-map
  	 ("M-s" . consult-history) ;; orig. next-matching-history-element
  	 ("M-r" . consult-history)) ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
  	register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
  	xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<")) ;; "C-+"

  (use-package cape
    ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;; Press C-c p ? to for help.
    :ensure t
    :bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
    ;; Alternatively bind Cape commands individually.
    ;; :bind (("C-c p d" . cape-dabbrev)
    ;;        ("C-c p h" . cape-history)
    ;;        ("C-c p f" . cape-file)
    ;;        ...)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
    ;; (add-hook 'completion-at-point-functions #'cape-history)
    ;; ...
    
#+end_src

** UI
#+begin_src emacs-lisp
    (use-package corfu
      :ensure t
      ;; Optional customizations
      :custom
      (corfu-cycle t)      ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)       ;; Enable auto completion
      (corfu-separator ?\s)	      ;; Orderless field separator
      (corfu-quit-at-boundary nil) ;; Never quit at completion boundary
      (corfu-quit-no-match nil)  ;; Never quit, even if there is no match
      (corfu-preview-current nil) ;; Disable current candidate preview
      (corfu-preselect 'prompt)   ;; Preselect the prompt
      (corfu-on-exact-match nil)  ;; Configure handling of exact matches
      (corfu-scroll-margin 5)     ;; Use scroll margin

      ;; Enable Corfu only for certain modes.
      ;;:hook ((prog-mode . corfu-mode)
      ;;       (shell-mode . corfu-mode)
      ;;       (eshell-mode . corfu-mode))

      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; TAB cycle if there are only few candidates
      ;; (setq completion-cycle-threshold 3)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (setq tab-always-indent 'complete)

      ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
      ;; try `cape-dict'.
      (setq text-mode-ispell-word-completion nil)

      ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
      ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
      ;; setting is useful beyond Corfu.
      (setq read-extended-command-predicate #'command-completion-default-include-p))
  ;; Enable Vertico.
  (use-package vertico
    :ensure t
    ;; :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))


  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Enable context menu. `vertico-multiform-mode' adds a menu in the minibuffer
    ;; to switch display modes.
    (context-menu-mode t)
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Template 

#+begin_src emacs-lisp
  (use-package tempel
    :ensure t
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
  	 ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
  		(cons #'tempel-expand
  		      completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf))
    ;;(add-hook 'emacs-lisp-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection
    :ensure t)

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
  		  (replace-regexp-in-string
  		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
  		   crm-separator)
  		  (car args))
  	  (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
  	'(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; useful beyond Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p))

  ;;customize keymaps here

  (use-package marginalia
    :ensure t
    :init (marginalia-mode)
    :bind (:map minibuffer-local-map
  	      ("M-A" . marginalia-cycle)))


#+end_src

* UI
#+begin_src emacs-lisp
  (use-package which-key
      :config
      (which-key-mode))
  (use-package visual-fill-column
    :ensure t
    :config
    (setq-default visual-fill-column-width 110
  		visual-fill-column-center-text t))


  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
  	doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-moonlight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package nerd-icons
    :ensure t
    :custom
    (nerd-icons-font-family "Symbols Nerd Font"))


#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil-mc
    :after evil
    :ensure t
    :init
    (global-evil-mc-mode 1))

  (use-package evil-goggles
    :ensure t
    :after evil
    :config
    (evil-goggles-mode)
    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)

    ;; other faces such as `diff-added` will be used for other actions
    (evil-goggles-use-diff-faces))
  (defun my/consult-books ()
    "Consult books in the ~/Documents/ folder."
    (interactive)
    (consult-fd "~/Documents/"))
  (use-package evil
    :ensure t
    :custom
    (evil-undo-system 'undo-redo)
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (define-key evil-normal-state-map (kbd "s") 'avy-goto-char-timer)
    (define-key evil-insert-state-map (kbd "C-s") 'avy-goto-char-timer)
    (evil-set-leader 'normal (kbd "SPC"))

    (define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
    (define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)
    (define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
    (define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)
    (define-key evil-normal-state-map (kbd "<leader>f") 'indent-region)
    (define-key evil-normal-state-map (kbd "<leader>sh") 'consult-outline)
    (define-key evil-normal-state-map (kbd "<leader>st") 'consult-theme)
    (define-key evil-normal-state-map (kbd "<leader>sb") 'consult-buffer)
    (define-key evil-normal-state-map (kbd "<leader>sk") 'my/consult-books)
    (define-key evil-normal-state-map (kbd "<leader>SPC") 'consult-recent-file)
    (define-key evil-normal-state-map (kbd "M-a") 'eat)

    ;; GTD MODE
    ;; (define-key evil-normal-state-map (kbd "<leader>gc") 'org-gtd-capture)
    ;; (define-key evil-normal-state-map (kbd "<leader>gp") 'org-gtd-process-inbox)
    ;; (define-key evil-normal-state-map (kbd "<leader>gi") 'org-gtd-clarify-item)
    ;; (define-key evil-normal-state-map (kbd "<leader>go") 'org-gtd-organize)
    ;; (define-key evil-normal-state-map (kbd "<leader>gg") 'org-gtd-engage)
    ;; (define-key evil-normal-state-map (kbd "<leader>gs") 'org-gtd-oops)

    ;; (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
    ;; (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
    ;; (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
    ;; (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
    ;; org
    (define-key evil-normal-state-map (kbd "<leader>oa") 'org-agenda)
    (define-key evil-normal-state-map (kbd "<leader>oc") 'org-capture)
    ;; roam
    (define-key evil-normal-state-map (kbd "<leader>nl") 'org-roam-buffer-toggle)
    (define-key evil-normal-state-map (kbd "<leader>nf") 'org-roam-node-find)
    (define-key evil-normal-state-map (kbd "<leader>ng") 'org-roam-graph)
    (define-key evil-normal-state-map (kbd "<leader>ni") 'org-roam-node-insert)
    (define-key evil-normal-state-map (kbd "<leader>nc") 'org-roam-capture)
    (define-key evil-normal-state-map (kbd "<leader>nu") 'org-roam-ui-mode)
    (define-key evil-normal-state-map (kbd "<leader>nj") 'org-roam-dailies-capture-today)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :custom
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
    :init
    (setq evil-org-use-additional-insert t)
    ;;(evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

* Tools
#+begin_src emacs-lisp
    (use-package elfeed
      :ensure t
      :config
      (use-package elfeed-org
        :ensure t
        :custom
        (rmh-elfeed-org-files (list "/home/ring/.config/emacs/elfeed.org"))
        :config
        (elfeed-org))
      (use-package elfeed-goodies
        :ensure t
        :config
        (elfeed-goodies/setup))
      (run-at-time nil (* 8 60 60) #'elfeed-update)
      :bind ("C-c w" . elfeed))


  (use-package pdf-tools
    :mode
    (("\\.pdf$" . pdf-view-mode))
    :custom
    (pdf-view-use-scaling nil)
    :ensure t)

  ;; (use-package eaf
  ;;   :ensure t)
  ;; (use-package epf-pdf-viewer
  ;;   :ensure t)
  (use-package eat
    :ensure t)

  (use-package mu4e)

#+end_src
** Git
#+begin_src emacs-lisp
  (use-package transient
      :ensure t)
  (use-package magit
      :ensure t)

  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))
  (use-package git-timemachine
    :ensure t)

#+end_src
